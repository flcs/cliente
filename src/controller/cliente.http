@endereco = http://localhost:3030/api/cliente

####################
// para buscar todos os itens do banco
####################
GET {{endereco}}/index HTTP/1.1
Content-Type: application/json

####################
// para buscar total dos itens do banco
####################
GET {{endereco}}/total HTTP/1.1
Content-Type: application/json

####################
// para conseguir paginar 
####################
GET {{endereco}}/page/1/3 HTTP/1.1
Content-Type: application/json

####################
// para não conseguir buscar por id
####################
GET {{endereco}}/4 HTTP/1.1
Content-Type: application/json

####################
// para não conseguir buscar por id
####################
GET {{endereco}}/99999999 HTTP/1.1
Content-Type: application/json

####################
// para buscar por id invalido
####################
GET {{endereco}}/aaaaaaaaaaaaaaaaaaaaaaaaaa HTTP/1.1
Content-Type: application/json

####################
// para buscar por id
####################
GET {{endereco}}/5282dd3a-ccbe-40b7-8733-7efe7f531b0c HTTP/1.1
Content-Type: application/json

####################
// pora buscar por email
####################
GET {{endereco}}/email/paulo@gmail.com HTTP/1.1
Content-Type: application/json

####################
// pora buscar por email
####################
GET {{endereco}}/email/paulo@teste.com HTTP/1.1
Content-Type: application/json

####################
// para conseguir incluir
####################
POST {{endereco}} HTTP/1.1
Content-Type: application/json

{
    "nome": "João",
    "telefone": "21 99999-0001",
    "email": "joao@email.com",
    "observacoes": "bla bla bla"
}

####################
// para não conseguir incluir, duplicado joao@email.com
####################
POST {{endereco}} HTTP/1.1
Content-Type: application/json

{
    "nome": "Erro",
    "email": "joao@email.com"
}

####################
// para conseguir incluir
####################
POST {{endereco}} HTTP/1.1
Content-Type: application/json

{
    "nome": "Paulo",
    "telefone": "22 99999-0002",
    "email": "paulo@email.com",
    "observacoes": "ble ble ble"
}

####################
// para apagar depois no teste de delete
####################
POST {{endereco}} HTTP/1.1
Content-Type: application/json

{
    "nome": "APAGAR",
    "telefone": "22 99999-0003",
    "email": "apagar@email.com",
    "observacoes": "somente para testar o delete"
}

####################
// para funcionar (adicionar o email joao2@email.com)
####################
POST {{endereco}} HTTP/1.1
Content-Type: application/json

{
    "nome": "João",
    "email": "joao2@email.com"
}

####################
// para forçar o erro do falta id
####################
PATCH {{endereco}} HTTP/1.1
Content-Type: application/json

{
    "nome": "sem id",
    "email": "sem_id@email.com"
}

####################
// para forçar o erro do falta id
####################
PATCH {{endereco}}/0 HTTP/1.1
Content-Type: application/json

{
    "nome": "sem id",
    "email": "sem_id@email.com"
}

####################
// para forçar o erro de id não encontrado
// valor limite = 2^31 - 1
####################
PATCH {{endereco}} HTTP/1.1
Content-Type: application/json

{
    "id": "4", 
    "nome": "João",
    "email": "joao@email.com"
}

####################
// para forçar o erro de id não encontrado
// valor limite = 2^31 - 1
####################
PATCH {{endereco}} HTTP/1.1
Content-Type: application/json

{
    "id": "2147483647", 
    "nome": "João",
    "email": "joao@email.com"
}

####################
// para forçar o erro de id inválido
// valor limite = 2^31
####################
PATCH {{endereco}} HTTP/1.1
Content-Type: application/json

{
    "id": "2147483648", 
    "nome": "João",
    "email": "joao@email.com"
}

####################
// Para forçar o erro de email já está em uso, usar id do joao@email.com
####################
PATCH {{endereco}}/4 HTTP/1.1
Content-Type: application/json

{
    "id": "4",
    "nome": "João",
    "email": "joao@teste.com",
    "telefone": "1234567890",
    "observacoes": "bla bla bla"
}

####################
// Campo não existente : CPF
####################
PUT {{endereco}} HTTP/1.1
Content-Type: application/json

{
    "id": "4",
    "nome": "João",
    "email": "joao@teste.com",
    "telefone": "1234567890",
    "observacoes": "bla bla bla"
}

####################
// Campo não existente : CPF
####################
PUT {{endereco}}/4 HTTP/1.1
Content-Type: application/json

{
    "id": "4",
    "nome": "João",
    "email": "joao@email.com",
    "telefone": "1234567890",
    "observacoes": "bla bla bla"
}

####################
// Campo não existente : CPF
####################
PUT {{endereco}}/4 HTTP/1.1
Content-Type: application/json

{
    "id": 4,
    "nome": "João",
    "cpf": "12345678901",
    "email": "joao@gmail.com",
    "telefone": "1234567890"
}

####################
// PUT correto, mas tem que vir com o Id do joao@email.com
####################
PUT {{endereco}} HTTP/1.1
Content-Type: application/json

{
    "id": "fe215d05-6f7c-459f-8623-951a58d30207",
    "nome": "João",
    "email": "joao@email.com"
}

####################
// para não conseguir apagar
####################
DELETE {{endereco}}/444 HTTP/1.1
Content-Type: application/json

####################
// para conseguir apagar, trazer o Id válido do cliente APAGAR
####################
DELETE {{endereco}}/555555555555 HTTP/1.1
Content-Type: application/json

####################

    



