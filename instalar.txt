
no VSCode, adicionar a REST Client, ENV, Jest, Jest Runner, Live Server, Material Icon, Reload, 


npm i express @types/express 
npm i cors @types/cors 
npm i typescript @types/node ts-node-dev 
npm i prisma @prisma/client @prisma/cli
npm i uuid @types/uuid

####
npx prisma init --datasource-provider postgresql

## cuidado, ele vai escrever suas definições de tabelas dentro do node_modules ... Terrível isso.
## se precisar encontrar depois vai ser difícil.

no arquivo prisma/schema.prisma:
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  username      String  @unique
  email         String  @unique
  hash_password String
  telefone      String?
  fullname      String?
  @@map("users")
}

model Cliente {
    id          Int       @id @default(autoincrement())
    nome        String
    email       String @unique
    telefone    String?
    observacoes String?
    @@map("clientes")
}

generator client {
  provider = "prisma-client-js"
}


===========================

no arquivo docker-compose.yml:
version: '3.8'
services:
  postgres:
    image: postgres:10.3
    restart: always
    environment:
      - POSTGRES_USER=sammy
      - POSTGRES_PASSWORD=senha
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - '5432:5432'
volumes:
  postgres:
===============================

no arquivo .env:
DATABASE_URL="postgresql://sammy:senha@localhost:5432/my-blog?schema=public"
===================

executar:
$ docker-compose up -d
$ docker ps

administrar:
psql -U sammy -h localhost -p 5432 -W banco_dados
senha: senha


"scripts": {
    "db:migrate": "npx prisma migrate dev --create-only --name ",
    "db:generate": "npx prisma generate",
    "db:push": "npx prisma db push"
}



npx prisma migrate dev --name "init"

npx prisma migrate dev status




